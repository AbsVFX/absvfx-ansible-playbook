---
# Generate SSL Certificates for Docker
- name: generate docker ssl certs
  include_role:
    name: absvfx.authority
    apply:
      tags:
        - generate_certs

- name: add docker-ce yum repository
  shell: yum-config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repo
  args:
    creates: /etc/yum.repos.d/docker-ce.repo
  tags: install

- name: install docker
  package:
    name: "{{ item }}"
  loop:
    - docker-ce
  tags:
    - install
    - update

# Copy systemd Service
- name: copy docker systemd service
  copy:
    src: /usr/lib/systemd/system/docker.service
    dest: /etc/systemd/system/docker.service

# Modify systemd service for listening on TLS
- name: allow tls connections
  lineinfile:
    path: /etc/systemd/system/docker.service
    regexp: '^ExecStart='
    line: "ExecStart=/usr/bin/dockerd -H {{ inventory_hostname }}:2376 --tlsverify --tlscacert=/etc/absvfx/ssl/certs/ca.crt --tlscert=/etc/absvfx/ssl/certs/{{ inventory_hostname }}.crt --tlskey=/etc/absvfx/ssl/certs/{{ inventory_hostname }}.key"
  tags:
    - update
  vars:
    common_name: docker.absvfx.xyz

# Allow TLS Docker Connections through firewall
- name: allow docker through firewall
  firewalld:
    port: 2376/tcp
    permanent: yes
    state: enabled
    zone: public

- name: reload systemd daemon
  shell: systemctl daemon-reload
  tags:
    - update

- name: enable and start docker
  systemd:
    state: started
    enabled: yes
    name: "docker"
  tags: install

- name: restart docker service
  systemd:
    state: restarted
    name: "docker"
  tags: update

- name: install docker pip module
  pip:
    name: docker
  tags:
    - install
    - update

#- include_tasks: backup.yml
- name: obtain datetime
  shell: "date +%Y%m%d-%H%M%S"
  register: time
  tags: backup
  when: docker_containers is defined

- name: save current state of container
  shell: "docker export {{ item.container_name }} > /tmp/{{ item.container_name }}_container_{{ time.stdout }}.tgz"
  loop:
    "{{ docker_containers|list }}"
  tags: backup
  when: docker_containers is defined

- name: copy container backups
  fetch:
    src: "/tmp/{{ item.container_name }}_container_{{ time.stdout }}.tgz"
    dest: "{{ backup_directory }}"
  loop:
    "{{ docker_containers|list }}"
  tags: backup
  when: docker_containers is defined

- name: remove container backups from node
  file:
    path: "/tmp/{{ item.container_name }}_container_{{ time.stdout }}.tgz"
    state: absent
  loop:
    "{{ docker_containers|list }}"
  tags: backup
  when: docker_containers is defined

- name: compress container volumes
  archive:
    path: "/opt/docker/{{ item.container_name }}"
    dest: "/tmp/{{ item.container_name }}_volume_{{ time.stdout }}.tgz"
  tags: backup
  when: docker_containers is defined

- name: copy container volumes
  fetch:
    src: "/tmp/{{ item.container_name }}_volume_{{ time.stdout }}.tgz"
    dest: "{{ backup_directory }}"
  loop:
    "{{ docker_containers|list }}"
  tags: backup
  when: docker_containers is defined

- name: remove container volume backups from node
  file:
    path: "/tmp/{{ item.container_name }}_volume_{{ time.stdout }}.tgz"
    state: absent
  loop:
    "{{ docker_containers|list }}"
  tags: backup
  when: docker_containers is defined
