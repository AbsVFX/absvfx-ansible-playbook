---
- name: detect UEFI capability
  stat:
    path: /sys/firmware/efi
  register: efi_firmware_directory

- name: set target disk information (UEFI)
  set_fact:
    root_disk_partition: 2
    boot_disk_partition_path: "{{ root_device }}1"
    root_disk_partition_path: "{{ root_device }}2"
    root_disk_partition_table: gpt
  when: efi_firmware_directory.stat.exists

- name: set target disk information (BIOS)
  set_fact:
    root_disk_partition: 1
    root_disk_partition_path: "{{ root_device }}1"
    root_disk_partition_table: msdos
  when: not efi_firmware_directory.stat.exists

- include_tasks: filesystem.yml
  tags:
    - new_install
- include_tasks: macbook.yml
  tags:
    - new_install
  when: macbook is defined

# TODO: Detect if booted image is that of Arch Linux
- include_tasks: archlinux.yml
  tags:
    - new_install

- include_tasks: network.yml
  tags:
    - new_install
  when: wireless is defined

- name: reboot
  reboot:
  tags:
    - new_install

#Â Clear local cache of host keys
- name: clear known hosts entry for remote machine
  local_action: lineinfile
  become: no
  args:
    path: ~/.ssh/known_hosts
    state: absent
    regexp: "{{ ansible_default_ipv4.address }}(.?)+$"

- name: add remote machine to known hosts file
  local_action: "shell root@{{ inventory_hostname }}"
  become: no

- name: wait for uptime
  wait_for_connection:
    timeout: 300
  tags:
    - new_install

- name: install required packages
  package:
    state: present
    name: "{{ item }}"
  loop:
    - docker
    - htop

- name: install required video drivers
  package:
    name: "{{ item }}"
    state: present
  loop:
    - mesa
    - "{{ graphics_driver }}"
    - "{{ vulkan_graphics_driver }}"
    - "{{ vaapi_driver }}"

- include_tasks: gnome.yml
