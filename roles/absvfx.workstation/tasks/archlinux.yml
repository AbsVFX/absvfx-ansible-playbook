---
# ARCHLINUX BASE INSTALLATION
#
# This playbook describes a core installation of Arch Linux, requiring the
# archlinux Boot CD. This should also work with the netboot distribution of
# Arch.

# If the booted up system is EFI-compatible, use pacstrap to install additional
# requirements for EFI support
- name: install arch linux base (UEFI)
  shell: "pacstrap /mnt base linux linux-firmware lvm2 xfsprogs grub efibootmgr openssh-askpass"
  when: efi_firmware_directory.stat.exists
  tags:
    - fresh

- name: install arch linux base (BIOS)
  shell: "pacstrap /mnt base linux linux-firmware lvm2 xfsprogs grub"
  when: not efi_firmware_directory.stat.exists
  tags:
    - fresh

# Generate the fstab outside the context of the target root filesystem
- name: generate fstab
  shell: "genfstab -U /mnt > /mnt/etc/fstab"

# Set timezone on system based upon variables defined in the inventory file
- name: symlink timezone
  shell: "arch-chroot /mnt /usr/bin/ln -sfv /usr/share/zoneinfo/{{ timezone }} /etc/localtime"

# Set hostname on system based upon hostname defined in the inventory file
- name: set hostname
  copy:
    dest: /mnt/etc/hostname
    content: {{ inventory_hostname }}

# Set system locales based upon locales defined in the inventory file
- name: uncomment requested languages
  blockinfile:
    content: "{{ locales }}"
    dest: /mnt/etc/locale.gen

- name: generate locales
  shell: "arch-chroot /mnt /usr/bin/locale-gen"

- name: adjust hardware clock
  shell: "arch-chroot /mnt /usr/bin/hwclock --systohc"

# Configure initial image to include lvm2 module
- name: configure mkinitcpio hooks
  shell: sed -i 's/block/block lvm2/' /mnt/etc/mkinitcpio.conf

# Generate boot image
- name: generate kernel image
  shell: "arch-chroot /mnt /usr/bin/mkinitcpio -P"

# If the booted system is EFI-compatible, install GRUB with a target of
# x86_64-efi, specify the boot directory and specify a bootloader id to the
# EFI system
- name: install bootloader (UEFI)
  shell: "arch-chroot /mnt /usr/bin/grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB"
  when: efi_firmware_directory.stat.exists

- name: install bootloader (BIOS)
  shell: "arch-chroot /mnt /usr/bin/grub-install --target=i386-pc {{ root_device }}"
  when: not efi_firmware_directory.stat.exists

# Create grub configuration file
- name: configure bootloader
  shell: "arch-chroot /mnt /usr/bin/grub-mkconfig -o /boot/grub/grub.cfg"
  ignore_errors: True
